pacman -S curl
pacman -S ripgrep
pacman -S mingw-w64-x86_64-python-pynvim
pacman -S zip

https://docs.platformio.org/en/latest/core/installation/methods/installer-script.html

CMD.EXE
curl -fsSL https://raw.githubusercontent.com/platformio/platformio-core-installer/master/get-platformio.py -o get-platformio.py
explorer %USERPROFILE%
cd  %USERPROFILE%
python get-platformio.py

----->
PlatformIO Core has been successfully installed into an isolated environment `C:\Users\AppuRaja\.platformio\penv`!

The full path to `platformio.exe` is `C:\Users\AppuRaja\.platformio\penv\Scripts\platformio.exe`

If you need an access to `platformio.exe` from other applications, please install Shell Commands
(add PlatformIO Core binary directory `C:\Users\AppuRaja\.platformio\penv\Scripts` to the system environment PATH variable):

See https://docs.platformio.org/page/installation.html#install-shell-commands
<-----

Installed into:
%USERPROFILE%\.platformio


Address bar:
%USERPROFILE%\.platformio\penv\Scripts

Copy the path

Windows+R
systempropertiesadvanced
Environment Variables -> System Variables -> Path -> Edit -> New
Paste the copied path

python get-platformio.py --help
python get-platformio.py check core


Any preferred dir:

pio project init --ide vim --board uno --board nodemcuv2 --board teensy31

Installation cache cleanup:
pio system prune

notepad main.cpp
--------------------------
/**
 * Blink
 *
 * Turns on an LED on for one second,
 * then off for one second, repeatedly.
 */
#include "Arduino.h"

#ifndef LED_BUILTIN
#define LED_BUILTIN 13
#endif

void setup()
{
  // initialize LED digital pin as an output.
  pinMode(LED_BUILTIN, OUTPUT);
}

void loop()
{
  // turn the LED on (HIGH is the voltage level)
  digitalWrite(LED_BUILTIN, HIGH);

  // wait for a second
  delay(1000);

  // turn the LED off by making the voltage LOW
  digitalWrite(LED_BUILTIN, LOW);

   // wait for a second
  delay(1000);
}
--------------------------



pio run

.pio/build/




pio run. Process (build) all environments specified in “platformio.ini” (Project Configuration File)

pio run --target upload. Build project and upload firmware to the all devices specified in “platformio.ini” (Project Configuration File)

pio run --target clean. Clean project (delete compiled objects)

pio run -e uno. Process only uno environment

pio run -e uno -t upload. Build project only for uno and upload firmware.

pio run --list-targets


https://docs.platformio.org/en/latest/core/userguide/index.html

https://github.com/platformio/platformio-examples/tree/develop

https://docs.platformio.org/en/latest/platforms/atmelavr.html


build-cheat-sheet:

all: pio -f -c vim run

upload: pio -f -c vim run --target upload

clean: pio -f -c vim run --target clean

program: pio -f -c vim run --target program

uploadfs: pio -f -c vim run --target uploadfs

update: pio -f -c vim update


arduheaderswin.exe avr -mcpu=atmega328p %USERPROFILE%\.platformio p n
Or
arduheaderswin.exe avr -mcpu=atmega328p %USERPROFILE%\.platformio p t
