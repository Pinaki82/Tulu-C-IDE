/*
 * * * * * * * * * * * * 2D way. * * * * * * * * * * * *
 * An example snippet of dynamic memory allocation for a 2D array.
 * Method 2: We'll have to simulate the 2D array (of pointers) with another pointer,
 * and this will be a pointer to a pointer.
 * The idea is to first create a one dimensional array of pointers (row basis),
 * and then,
 * for each array entry (each row's base address/pointers),
 * create another one dimensional array of pointers (column basis).
 *
 * NOTE: use it within the function you need, but don't create a
 * dedicated memory allocation function with it.
*/

#include <errno.h> /* required */
#include <stdint.h> /* required */
#include <stdio.h> /* required */
#include <stdlib.h> /* required */

int **array, row, col, i, j; /*  **array is a 2D array, essentially a
                                    collection of some array (of pointers).*/

printf("maximum number of rows?\n");
scanf("%d", &row);
printf("maximum number of col?\n");
scanf("%d", &col);

array = (int **)malloc((size_t)row * sizeof(int *));  /* memory allocation,
                                                            row basis */
if(array==NULL) {
  printf("\ndynamic memory allocation failed\n");
  system("PAUSE");
  exit(EXIT_FAILURE);
}
for(i=0; i<=row-1; i++) {
  array[i]=(int *)malloc((size_t)col * sizeof(int));  /* memory allocation,
                                                            column basis */
  if(array[i]==NULL) {
    printf("\ndynamic memory allocation failed\n");
    system("PAUSE");
    exit(EXIT_FAILURE);
  }
}
for(i = 0; i<=row-1; i++) {
  for(j = 0; j<=col-1; j++) {
    array[i][j] = 0;  /* filling the entire array with a temporary number */
  }
}


printf("......input the elements........\n");
for(i=0; i<=row-1; i++) {
  for(j=0; j<=col-1 ; j++) {
    scanf("%d",(*(array+i)+j)); /* NOTE: you cannot use (array+i*col+j) or
      any other pointer arithmetic. however you are allowed to perform
      &array[i][j] or, (*(array+i)+j) here. */
  }
}

printf("\nyour input was:\n");
for(i=0; i<=row-1 ; i++) {
  for(j=0; j<=col-1 ; j++) {
    printf("%d.%d. array=%d\n",i,j,*(*(array+i)+j)); /* NOTE: you cannot use
      *(array+i*col+j) or any other pointer arithmetic. however you are allowed
      to perform
      array[i][j] or, *(*(array+i)+j) here. */
  }
}

for(i = 0; i<=row-1; i++) {
  free(array[i]); /* very much essential */
  array[i] = NULL;
}
free(array); /* very much essential */
array = NULL;
