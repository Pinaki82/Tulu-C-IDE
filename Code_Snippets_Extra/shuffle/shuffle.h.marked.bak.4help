/* ---------- HELP-----------HELP-----------HELP------------
 * * * use this header as mentioned below * * *

size = max_size - min_size + 1;
sl_store = ( int * ) malloc ( size * sizeof ( int ) );
time_t seconds;
time ( &seconds );
srand ( ( unsigned int ) seconds );
shuffle ( sl_store, &min_size, &max_size );
  for ( i = 0 ; i <= size - 1; i += 1 ) {
    ..................
    }
*/

#ifndef __SHUFFLE_H__
#define __SHUFFLE_H__

#ifdef __cplusplus
extern "C"
  {
#endif

  void shuffle ( int *store_4_shuffle, int *LOW, int *HIGH ); //see HELP above

#ifdef __cplusplus
  }
#endif

#endif // __SHUFFLE_H__

#include <stdio.h>
#include <stdlib.h>
// #include <conio.h>
#include "rand_gen.h"
#define YES 1
#define NO 0

void shuffle ( int *store_4_shuffle, int *LOW, int *HIGH ) {
  int size, i, k, j, temp01, zero_appeared = 0, zero_stored = 0, rejected_4_storing;
  if ( store_4_shuffle == NULL ) {
    printf ( "out of memory\n" );
    exit ( 0 );
    }
  size = *HIGH - *LOW + 1;
  if ( *LOW != 0 ) {
    zero_appeared = 1; /* stop zero-related calculations
                          here if zero is not required */
    //printf ( "initial is not a zero\n" );
    }
  for ( i = 0; i <= size - 1; i += 1 ) {
    /* fill the entire array with an arbitrary
     num. that will not be in use.
     so that repeated numbers (such as 0)
     doesn't create infinite loops,
     (specifically in the 2-nd for loop) */
    * ( store_4_shuffle + i ) = *HIGH + 1;
    }
  //---------------------------------
  for ( i = 0 ; i <= size - 1 ; i += 1 ) {
    //printf ( "1st for-loop run no. %d\n", i );
    temp01 = rand_gen ( LOW, HIGH );
    if ( ( *LOW == 0 ) && ( temp01 == 0 ) && ( zero_appeared > 0 ) ) {
      zero_appeared += 1;
      //printf ( "condn met for zero_appeared. %d\n", zero_appeared );
      }

    //_getch();

    for ( k = 0 ; k <= size - 1; k += 1 ) {
      if ( * ( store_4_shuffle + k ) == 0 ) {
        zero_stored += 1;
        //printf ( "zero_stored= %d\n", zero_stored );
        break;
        }
      }
    if ( ( zero_appeared > 0 ) && ( zero_stored > 0 ) ) {
      while ( temp01 == 0 ) {
        //printf ( "got zero %d times, rand_gen() again\n", i );
        temp01 = rand_gen ( LOW, HIGH );
        }
      }
    //printf ( "got rand here: %d\n", temp01 );
    rejected_4_storing = NO;
    for ( j = 0 ; j <= size - 1 ; j += 1 ) {
      //printf ( "2nd for-loop run no. %d\n", j );
      if ( * ( store_4_shuffle + j ) == temp01 ) {
        rejected_4_storing = YES;
        //printf ( "rejected at j=%d\n", j );
        i -= 1; /* this part is v.v. important,
                   since 1st for-loop could not store anything
                   into the array due to rejection, it needs repetition */
        break;
        }
      }
    if ( rejected_4_storing == YES ) {
      //printf ( "1st for-loop broken at run no. %d\n", i + 1 );
      continue;
      }
    else if ( rejected_4_storing == NO ) {
      * ( store_4_shuffle + i ) = temp01;
      //printf ( "here i=%d, stored. %d\n", i, * ( store_4_shuffle + i ) );
      }
    //_getch();
    }
  //---------------------------------
  }

